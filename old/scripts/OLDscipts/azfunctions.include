#!/bin/bash
#ver 2015.11.19

# following 3 lines must always be present
#path=`set | grep BASH_SOURCE | sed 's|.*\"\(.*\)/[^/]*\".*|\1|' | sed '/BASH_SOURCE=/s/.*/\./'`
#script=`set | grep BASH_SOURCE | sed 's|.*\".*/\([^/]*\)\".*|\1|' | sed '/BASH_SOURCE=/s/.*/\./'`
#options=$*; . $path/azfunctions.include; checkOptions "-h -help -i -d -l"


testHello() { echo 'Hello'
}

echo1stOpt() { echo $1
}

echo2() { echo "" 1>&2;
while [ -n "$*" ]; do echo -e "$1" 1>&2; shift; done
}

echored() { echo -e "\033[31m\033[1m$*\033[0m"
}
echogreen() { echo -e "\033[32m\033[1m$*\033[0m"
}
echoblue() { echo -e "\033[34m\033[1m$*\033[0m"
}

details() { echo "" 1>&2; echo -e "\033[31m\033[1mDETAILS\033[0m:  \033[1m$1\033[0m"
}

usage() { echo "" 1>&2; echo -n -e "\033[31m\033[1mUSAGE\033[0m:   \033[1m$1  \033[0m"
}

# Returns the number (1st arg) in decimal format
convertEtoDecimal() { printf "%.0f\n" $1
}

getOption() { printf "%s " "$options" | awk '{for (i=1;i<=NF;i++) if ($i=="'$1'") {print "True"; exit}; print "False"}'
}

# Returns the number of atoms in OUTCAR file (which is given as an argument)
getAtomsNr() { zgrep -a --text "number of ions     NIONS = " $1 | awk '{print $12}'
}

# Returns the list of folders match specific pattern (1st arg) up to given depth (2nd arg) containing specific file (3rd arg)
getFoldersContain() {
    folders="${1:-.}"
    depth=${2:-"1"}
    name=${3:-"OUTCAR*"}
#mac should check for * if no * remove eval !!!!
    eval find "${folders}" -maxdepth $depth -name "$name" | rev | cut -d/ -f2- | rev
#linux
#    eval find "${folders}" -maxdepth $depth -name "$name" | rev | cut -d/ -f2- | rev
}

# Returns all E_p and lambda from OSZICAR (1st arg)
getE_pAll() { zgrep E_p $1 | awk '{print $3 " " $NF}'
}

# Returns last E_p from OSZICAR (1st arg)
getE_pLast() { zgrep -i 'E_p =' $1 | tail -1 |  awk '{print $3}'
}

# Returns LAMBDA from OSZICAR (1st arg)
getLAMBDA() { zgrep -i -m 1 'lambda =' $1 | awk '{print $NF}'
}

# Returns all RMS from OUTCAR (1st arg)
getRMStotal() { zgrep 'rms(total)' $1 | awk '{print $3}'
}

# Extract the total energy after each electronic steps in OUTCAR (1st arg)    !!! STATIC not MD
getTotalEneAllSteps() { zgrep 'free energy    TOTEN' $1 | awk '{print $(NF-1)}'
}

# Extract the total energy after final electronic step in OUTCAR (1st arg)    !!! STATIC not MD
getTotalEneLastStep() { zgrep 'free  energy   TOTEN' $1 | awk '{print $(NF-1)}'
}

# Extract the E0 after each electronic steps in OUTCAR (1st arg)    !!! STATIC not MD
getE0AllSteps() { zgrep --text "energy without entropy" $1 | awk '{print $NF}'
}

# Extract the E0 after last electronic step in OUTCAR (1st arg)    !!! STATIC not MD
getE0LastStep() { zgrep --text "energy  without entropy" $1 | awk '{print $NF}'
}

# Extract the absoule values of total energy-change in OUTCAR
getTotEneChangeAbs() { zgrep 'total energy-change' $1 | awk -F: '{print $2}' | awk '{print $1}' | awk '{x=$1;y=(x<0?-x:x);print y}'
}

# Prints magnetization table for given direction (1st arg) out of OUTCAR (2nd arg)
printMagnetizationTable() {
    magDirec=${1:-'z'}
    OUTCAR=${2:-'OUTCAR'}
    numatoms=`getAtomsNr $OUTCAR`
    magLineNum=`echo 5+$numatoms | bc`
    zgrep ".*" $OUTCAR  | tac | grep 'magnetization ('$magDirec')' -B$magLineNum -m1 | tac
}

# Determines UP/DOWN moments in magnetization table (which is 1st argument) extracted from OUTCAR
parseMagnetizationTable() { awk 'BEGIN{ORS=""}{
    if ( (NR>4 && NR <'$numatoms'+5) && ($NF>0.) ) { print "U"};
    if ( (NR>4 && NR <'$numatoms'+5) && ($NF<0.) ) { print "D"};
    }' $1
}

# Determines UP/DOWN moments in magnetization table (which is 1st argument) extracted from OUTCAR
parseMagnetizationTable2() { awk 'BEGIN{ORS="";i=1}{ 
    if ($1==i){i++; moment=$NF;
        if (moment>0.){print "U"}
        else if(moment<0.){print "D"}
        else if(moment==0.){print "0"}}
    }' $1
}

# Determines UP/DOWN moments in MAGMOM tag in INCAR file (which is 1st argument)
parseINCARmag() { awk '
    tolower($1) ~ /magmom/{
    split($0,arr,"=")
    split(arr[2],spins," ")
    spl=length(spins)
    for (i=1; i<=spl; i++) {
        if      (spins[i] < 0.) {printf "%c", "D"}
        else if (spins[i] > 0.) {printf "%c", "U"}
    }
#    print ""
    }' $1
}


# Compare moments extracted already from INCAR (1st arg) and OUTCAR (2nd arg)
compareTwoStringCbyC() {
    awk 'FNR==NR{var1=$1;next}{var2=$1}{
        print var1 "  INCAR"
        print var2 "  OUTCAR"
        for (i=1; i<=length; i++) {
            if (substr(var1, i, 1) == substr(var2, i, 1)) printf "\033[34m%c\033[0m", "-"; else printf "\033[31m%c\033[0m", "*";
            }
        }
        END {
            printf "\n"
            for (i=1; i<=length; i++) {
                printf i % 10;
                }
                ; printf "\n"
            }' $1 $2
}

# Normalise the universal scaling factor in POSCAR (1st arg) and set it to 1.0
poscarLatNormalise() {
#awk '{if (NR==2) {print substr($1,0,1)} }' POSCAR
    POSCAR=${1:-'POSCAR'}
    echo "Moving POSCAR to subfolder"
    mkdir poscarPrep
    tmpfile="POSCARini"
    mv $POSCAR poscarPrep/$tmpfile
    cd poscarPrep/
    echo 'Normalising POSCAR sublattice'
    sxstructprint --vasp -i $tmpfile > struct.sx
    sx2poscar -i struct.sx -o $POSCAR > sx2poscar.log
    cp $POSCAR ../
    cd ..
}

# Substitutes the value (2nd arg) of provided tag (1st arg) in INCAR by given value
substINCARtagVALUE() {
    tag=$1
    shift
    value="$@"
    grep -i $tag INCAR
    sed -i "s/^.*\($tag.*=\).*/\1 $value/I" INCAR
    grep -i $tag INCAR
}

# Check whether a Tag exist in INCAR or not
checkINCARtag() {
    tag=$1
    exist=`grep -i '^.*'$tag'.*=' INCAR`
    echoblue "$exist"
    multiple=`echo  "$exist" | wc -l`
    if [ -z "$exist" ]
        then echored 'Tag not found!'
    elif [ "$multiple" -gt "1" ]
        then echored 'WARNING: Multiple tags (#'$multiple') found!'
    fi
}



